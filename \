# Mars::Probe::Weather
#   
#     data: return  
#
# Mars::Probe::Weather.new(date: :today) 
# Mars::Probe::Weather.new(date: "2016-08-12")
# Mars::Probe::Weather.new(latest_dates: 10)
# Mars::Probe::Weather.new(start: "2016-08-28", end: "2015-03-25")
# mars = Mars::Probe::Weather.new(start: "2016-08-28", end: "2015-03-25")

# Public API

#   mars.all_temp
#   mars.

module Mars
  class Probe
    class Weather < Base
      attr_reader :data
      
      ## initialize(*options) :Public 
      # $*option -> multiple argument - setting ex.(:today), (:past, 20)
      # 
      # @Returns -> Void
 
      def initialize(option={})
         
        # @option = option #Hash
        @params = {} # String
        @page = 1 # Int
        @data = [] #ArrayP
        set_option(option)
        set_initial_data
      end

      def max_temp
        @data.select{|key, value| key == :terrestrial_date || key == :max_temp }
      end

      def max_temp_fahrenheit
        @data.select{|key, value| key == :terrestrial_date || key == :max_temp_fahrenheit }
      end      
 
      def min_temp
        @data.select{|key, value| key == :terrestrial_date || key == :min_temp }
      end

      def min_temp_fahrenheit
        @data.min_tem_fahrenheit
      end

      def count
        @data.count
      end


      private
      ## get :Public 
      # 
      # @Returns -> result:json - created by parse_response method

      def get
        if @params.empty?
          response = get_latest 
        elsif @params.keys.include?(:page)
          response = get_page
        elsif @params.any?          
          response = get_date
        end 
      rescue => e  
        handle_error(e)
      end


      def get_latest
        response = rest_client.get do |req|
          req.url '/v1/latest/'
          req.params['format'] = 'json'
        end
        response
      end


      def get_page
        (1..@page).each do |n|
           response = rest_client.get do |req|
             req.url '/v1/archive/', :page => n
             req.params['format'] = 'json'
           end
           parse_response(response)
        end
      end


      def get_date
        response = rest_client.get do |req|
          req.url '/v1/archive/'
          req.params['format'] = 'json'
          @params.each do |key, value|
             req.params[key] = value  
          end   
        end
        p response
        parse_response(response)
      end


      def set_initial_data
        get
      end
    
      # parse_response(response_body) :Protected
      # $response_body ->  
      # 
      # @Returns ->  _:Hash - Parsed response_body  
      
      def set_option(option)   
     
        if option_valid?(option)
          case option.keys.first
            when :start
              start(option)
            when :date
              date(option)
            when :archive
              archive(option)
          end
        end   
      end


      def option_valid?(option)
        is_hash?(option)
        key = [:start, :end, :date, :archive]
        return true if option.nil?
        option.keys.each do |op|
          raise Mars::MarsError::ArgumentError, "Invalide option key #{op}" unless key.include?(op)
        end
      end


      def is_hash?(option)
        raise Mars::MarsError::ArgumentError, "Invalid argument #{option}.It should be hash like { latest_date: 20 }" unless option.is_a?(Hash)
      end
      

      def start(option)
        start_date = option[:start]
        Date.parse(start_date)
        @params[:terrestrial_date_start] = start_date

        end_date = option[:end]
        Date.parse(end_date)
        @params[:terrestrial_date_end] = end_date
      rescue => e
        raise Mars::MarsError::ArgumentError, "Invalid Value"   
      end

 
      def date(option)
        #terrestrial_date_end=2015-10-20&terrestrial_date_start=2015-10-18&page=1
        date = option[:date]
        d = Date.parse(date)
        @params[:terrestrial_date_start] = d.to_s
        @params[:terrestrial_date_end] = (d+2).to_s
      rescue => e
        raise Mars::MarsError::ArgumentError, "Invalid Value"
      end

                               
      def archive(option)
        n = option[:archive]
        page = n % 10 == 0 ? n / 10 : n / 10 + 1 
        # 100 / 10 data per request = 10 times request
        @page = page
        @params[:page] = page
      end
 

      def option_url
        if @params == nil 
          "latest"
        end
      end
 
 
      # parse_response(response_body) :Protected
      # $response_body ->  
      # 
      # @Returns ->  _:Hash - Parsed response_body  
 
      def base_api_url
        "http://marsweather.ingenology.com/v1" 
      end
 
      # parse_response(response_body) :Protected
      # $response_body ->  
      # 
      # @Returns ->  _:Hash - Parsed response_body  
 
      def api_url
        base_api_url 
      end
 
      def parse_response(response_body)
        if response_body 
          body = JSON.parse(response_body.body)
          if body.nil? || body.empty?
            raise Mars::MarsError, "Couldn't get body. Server may get trouble" 
          end
          body["results"].each do |obj|
            @data << obj
          end
        else 
          raise Mars::MarsError, "API Request Failed"
        end
      end
 
    end
  end
end
